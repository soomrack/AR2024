#define M1_DIR 4    // 电机1方向引脚（HIGH=前进，LOW=后退）
#define M1_PWM 5    // 电机1速度引脚（PWM）
#define M2_DIR 7    // 电机2方向引脚
#define M2_PWM 6    // 电机2速度引脚
#define BUTTON_PIN 12 // 启动按钮（内部上拉，按下接地）

const int SENSOR_LEFT = A2;  // 左红外传感器
const int SENSOR_RIGHT = A3; // 右红外传感器
const int TRACK_THRESHOLD = 900; // 轨迹阈值（需根据环境校准）
const int BASE_SPEED = 100;  // 基础速度（0-255）
const int TURN_SPEED_RATIO = 60; // 转向时速度比例（%）

bool isRunning = false;      // 运行状态标志
unsigned long lastDebounceTime = 0; // 按钮去抖动时间

void setup() {
  pinMode(M1_DIR, OUTPUT);
  pinMode(M1_PWM, OUTPUT);
  pinMode(M2_DIR, OUTPUT);
  pinMode(M2_PWM, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP); // 内部上拉电阻

  InitMotors(); // 初始化电机
  Serial.begin(9600);
  Serial.println("循迹机器人初始化完成！按下按钮启动");
}

// 初始化电机状态
void InitMotors() {
  Motors(0, 0); // 初始停止
}

// 电机控制函数（带速度限幅）
void Motors(int speed1, int speed2) {
  // 速度限幅（-255 ~ 255）
  speed1 = constrain(speed1, -255, 255);
  speed2 = constrain(speed2, -255, 255);

  // 电机1控制（方向+速度）
  digitalWrite(M1_DIR, speed1 >= 0 ? HIGH : LOW);
  analogWrite(M1_PWM, abs(speed1));

  // 电机2控制（方向+速度）
  digitalWrite(M2_DIR, speed2 >= 0 ? HIGH : LOW);
  analogWrite(M2_PWM, abs(speed2));
}

// 前进
void MoveForward(int speed) {
  Motors(speed, speed);
}

// 左转（差速转向，左电机减速）
void TurnLeft(int speed) {
  Motors(speed * TURN_SPEED_RATIO / 100, speed); // 左电机60%速度，右电机全速
}

// 右转（差速转向，右电机减速）
void TurnRight(int speed) {
  Motors(speed, speed * TURN_SPEED_RATIO / 100); // 右电机60%速度，左电机全速
}

// 停止
void Stop() {
  Motors(0, 0);
}

// 读取传感器值（带异常处理）
int ReadSensor(int pin) {
  if (pin < A0 || pin > A3) { // 检查模拟引脚范围（A0~A3对应0~3）
    Serial.println("错误：无效传感器引脚");
    return 0;
  }
  return analogRead(pin);
}

// 按钮检测（带防抖动）
bool CheckButton() {
  static int lastButtonState = HIGH;
  int currentState = digitalRead(BUTTON_PIN);

  // 检测状态变化
  if (currentState != lastButtonState) {
    lastDebounceTime = millis();
  }

  // 等待抖动结束
  if ((millis() - lastDebounceTime) > 50) {
    if (currentState == LOW) { // 按钮按下（上拉电阻，LOW为有效）
      lastButtonState = currentState;
      return true;
    } else {
      lastButtonState = currentState;
    }
  }
  return false;
}

// 循迹核心逻辑
void FollowTrack() {
  int leftValue = ReadSensor(SENSOR_LEFT);
  int rightValue = ReadSensor(SENSOR_RIGHT);

  // 打印传感器值（调试用）
  Serial.print("左: "); Serial.print(leftValue);
  Serial.print("\t右: "); Serial.println(rightValue);

  // 循迹逻辑
  if (leftValue > TRACK_THRESHOLD && rightValue > TRACK_THRESHOLD) {
    // 双传感器检测到白色（偏离轨迹），向中间修正
    MoveForward(BASE_SPEED); // 直走
  } else if (leftValue > TRACK_THRESHOLD) {
    // 左侧偏出（左传感器见白），右转修正
    TurnRight(BASE_SPEED);
  } else if (rightValue > TRACK_THRESHOLD) {
    // 右侧偏出（右传感器见白），左转修正
    TurnLeft(BASE_SPEED);
  } else {
    // 双传感器检测到黑线（正常循迹），保持前进
    MoveForward(BASE_SPEED);
  }
}

void loop() {
  // 检测按钮按下，切换运行状态
  if (CheckButton()) {
    isRunning = !isRunning;
    if (isRunning) {
      Serial.println("启动循迹模式");
    } else {
      Serial.println("停止循迹模式");
      Stop();
    }
  }

  // 运行循迹逻辑
  if (isRunning) {
    FollowTrack();
  } else {
    // 非运行状态，输出传感器值
    int left = ReadSensor(SENSOR_LEFT);
    int right = ReadSensor(SENSOR_RIGHT);
    Serial.print("传感器值 - 左: "); Serial.print(left);
    Serial.print("\t右: "); Serial.println(right);
  }

  delay(20); // 控制循环频率
}
