#include <DHT.h>
#include <Arduino.h>

// Пины подключения
#define DHT_PIN             8
#define LIGHT_SENSOR_PIN    A0
#define MOISTURE_SENSOR_PIN A1
#define LED_GROW_PIN        5
#define WATER_PUMP_PIN      6
#define HEATER_PIN          3
#define FAN_PIN             7

// Оптимальные параметры
#define OPT_TEMP        25.0
#define OPT_HUMIDITY    50.0
#define OPT_MOISTURE    400   // Ниже этого значения - почва сухая
#define OPT_LIGHT       500

// Допустимые отклонения
#define TEMP_TOLERANCE  2.0
#define HUMID_TOLERANCE 5.0
#define MOIST_TOLERANCE 50
#define LIGHT_TOLERANCE 50

// Настройки насоса
#define PUMP_RUN_DURATION    3000    // 3 секунды работы
#define PUMP_PAUSE_DURATION  30000   // 30 секунд паузы
#define MOISTURE_SAMPLES     5       // Усреднение показаний

DHT envSensor(DHT_PIN, DHT11);

struct SystemState {
  bool pumpIsOn = false;
  bool heaterIsOn = false;
  bool fanIsOn = false;
  bool lightIsOn = false;
  unsigned long pumpStartTime = 0;
  unsigned long pumpPauseTime = 0;
  float temperature = 0;
  float humidity = 0;
  int lightLevel = 0;
  int moistureLevel = 0;
};

SystemState state;

void setup() {
  Serial.begin(115200);
  
  pinMode(LED_GROW_PIN, OUTPUT);
  pinMode(WATER_PUMP_PIN, OUTPUT);
  pinMode(HEATER_PIN, OUTPUT);
  pinMode(FAN_PIN, OUTPUT);

  digitalWrite(LED_GROW_PIN, LOW);
  digitalWrite(WATER_PUMP_PIN, HIGH);  // HIGH - насос выключен
  digitalWrite(HEATER_PIN, LOW);
  digitalWrite(FAN_PIN, LOW);

  envSensor.begin();
  
  Serial.println("System initialized - Pump fixed");
}

int readStableMoisture() {
  int sum = 0;
  for (int i = 0; i < MOISTURE_SAMPLES; i++) {
    sum += analogRead(MOISTURE_SENSOR_PIN);
    delay(10);
  }
  return sum / MOISTURE_SAMPLES;
}

void readSensors() {
  state.temperature = envSensor.readTemperature();
  state.humidity = envSensor.readHumidity();
  state.lightLevel = analogRead(LIGHT_SENSOR_PIN);
  state.moistureLevel = readStableMoisture();
}

void controlLight() {
  bool needLight = (state.lightLevel < OPT_LIGHT - LIGHT_TOLERANCE);
  if (needLight != state.lightIsOn) {
    digitalWrite(LED_GROW_PIN, needLight ? HIGH : LOW);
    state.lightIsOn = needLight;
    Serial.print("Light ");
    Serial.println(needLight ? "ON" : "OFF");
  }
}

void controlWater() {
  bool soilIsDry = (state.moistureLevel < OPT_MOISTURE - MOIST_TOLERANCE);
  
  if (soilIsDry) {
    if (!state.pumpIsOn) {
      // Проверяем, прошла ли пауза
      if (millis() - state.pumpPauseTime >= PUMP_PAUSE_DURATION) {
        digitalWrite(WATER_PUMP_PIN, LOW);  // Включаем насос
        state.pumpIsOn = true;
        state.pumpStartTime = millis();
        Serial.println("Pump ON (soil dry)");
      }
    } else {
      // Проверяем, не пора ли выключить
      if (millis() - state.pumpStartTime >= PUMP_RUN_DURATION) {
        digitalWrite(WATER_PUMP_PIN, HIGH); // Выключаем насос
        state.pumpIsOn = false;
        state.pumpPauseTime = millis();
        Serial.println("Pump OFF (timer)");
      }
    }
  } else {
    // Если почва влажная - выключаем насос
    if (state.pumpIsOn) {
      digitalWrite(WATER_PUMP_PIN, HIGH);
      state.pumpIsOn = false;
      state.pumpPauseTime = millis();
      Serial.println("Pump OFF (soil OK)");
    }
  }
}

void controlTemperature() {
  bool needHeat = (state.temperature < OPT_TEMP - TEMP_TOLERANCE);
  if (needHeat != state.heaterIsOn) {
    digitalWrite(HEATER_PIN, needHeat ? HIGH : LOW);
    state.heaterIsOn = needHeat;
    Serial.print("Heater ");
    Serial.println(needHeat ? "ON" : "OFF");
  }
}

void controlVentilation() {
  bool needFan = (state.humidity > OPT_HUMIDITY + HUMID_TOLERANCE) ||
                (state.temperature > OPT_TEMP + TEMP_TOLERANCE) ||
                (state.heaterIsOn);
  if (needFan != state.fanIsOn) {
    digitalWrite(FAN_PIN, needFan ? HIGH : LOW);
    state.fanIsOn = needFan;
    Serial.print("Fan ");
    Serial.println(needFan ? "ON" : "OFF");
  }
}

void logSystemState() {
  Serial.println("\n==== Status ====");
  Serial.print("Temp: "); Serial.print(state.temperature); Serial.print("C | ");
  Serial.print("Hum: "); Serial.print(state.humidity); Serial.print("% | ");
  Serial.print("Light: "); Serial.print(state.lightLevel); Serial.print(" | ");
  Serial.print("Moisture: "); Serial.println(state.moistureLevel);
  Serial.println("================");
}

void loop() {
  readSensors();
  
  controlLight();
  controlWater();  // Исправленная функция управления насосом
  controlTemperature();
  controlVentilation();
  
  logSystemState();
  
  delay(2000);
}

int main() {
  init();
  setup();
  while (true) {
    loop();
  }
  return 0;
}
